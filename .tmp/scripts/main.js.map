{"version":3,"sources":["main.js"],"names":["console","log","window","addEventListener","web3","Web3","currentProvider","provider","document","getElementById","value","providers","HttpProvider","startApp","doFilterStopWatching","doContractEventWatchStop","web","isConnected","setData","setWeb3Version","autoRetrieveFlag","doGetAccounts","doGetNodeStatus","doGetCompliers","doConnect","version","getNode","error","result","toLowerCase","includes","nodeType","tooLowerCase","setUIBasedOnNodeType"],"mappings":";;AAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AAEA;;;;AAIAC,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAM;AACpC,MAAI,OAAOC,IAAP,KAAgB,WAApB,EAAiC;AAC/BF,IAAAA,MAAM,CAACE,IAAP,GAAc,IAAIC,IAAJ,CAASD,IAAI,CAACE,eAAd,CAAd;AACD,GAFD,MAEO;AACLN,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,QAAIM,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCC,KAAvD;AACAR,IAAAA,MAAM,CAACE,IAAP,GAAc,IAAIC,IAAJ,CAAS,IAAIA,IAAI,CAACM,SAAL,CAAeC,YAAnB,CAAgCL,QAAhC,CAAT,CAAd;AACD;;AACDM,EAAAA,QAAQ;AACT,CATD;AAWA;;;;;;AAMAA,QAAQ,GAAG,oBAAM;AACfC,EAAAA,oBAAoB;AACpBC,EAAAA,wBAAwB;;AAExB,MAAIC,GAAG,IAAIZ,IAAI,CAACa,WAAL,EAAX,EAA+B;AAC7BC,IAAAA,OAAO,CAAC,gBAAD,EAAmB,WAAnB,EAAgC,KAAhC,CAAP;AAEAC,IAAAA,cAAc;AAEd,QAAIC,gBAAJ,EAAsBC,aAAa;AACpC,GAND,MAMO;AACLH,IAAAA,OAAO,CAAC,gBAAD,EAAmB,eAAnB,EAAoC,IAApC,CAAP;AACD;;AAED,MAAI,CAACE,gBAAL,EAAuB,OAdR,CAef;AACA;;AACAE,EAAAA,eAAe;AACfC,EAAAA,cAAc;AACf,CAnBD;;AAqBAC,SAAS,GAAG,qBAAM;AAChB,MAAIjB,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCC,KAAvD;AACAR,EAAAA,MAAM,CAACE,IAAP,GAAc,IAAIC,IAAJ,CAAS,IAAIA,IAAI,CAACM,SAAL,CAAeC,YAAnB,CAAgCL,QAAhC,CAAT,CAAd;AACAM,EAAAA,QAAQ;AACT,CAJD;;AAMAM,cAAc,GAAG,0BAAM;AACrBf,EAAAA,IAAI,CAACqB,OAAL,CAAaC,OAAb,CAAqB,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACtC,QAAID,KAAJ,EAAWT,OAAO,CAAC,qBAAD,EAAwBS,KAAxB,EAA+B,IAA/B,CAAP,CAAX,KACK;AACHT,MAAAA,OAAO,CAAC,qBAAD,EAAwBU,MAAxB,EAAgC,KAAhC,CAAP;;AAEA,UAAIA,MAAM,CAACC,WAAP,GAAqBC,QAArB,CAA8B,UAA9B,CAAJ,EAA+C;AAC7CC,QAAAA,QAAQ,GAAG,UAAX;AACD,OAFD,MAEO,IAAIH,MAAM,CAACI,YAAP,GAAsBF,QAAtB,CAA+B,YAA/B,CAAJ,EAAkD;AACvDC,QAAAA,QAAQ,GAAG,YAAX;AACD,OAFM,MAEA;AACLA,QAAAA,QAAQ,GAAG,MAAX;AACD;;AACDE,MAAAA,oBAAoB;AACrB;AACF,GAdD;AAeD,CAhBD","sourcesContent":["console.log(\"'Allo 'Allo!\");\n\n/**\n *  Listener for load\n */\n\nwindow.addEventListener(\"load\", () => {\n  if (typeof web3 !== \"undefined\") {\n    window.web3 = new Web3(web3.currentProvider);\n  } else {\n    console.log(\"Injected web3 Not Found!!\");\n    let provider = document.getElementById(\"provider_url\").value;\n    window.web3 = new Web3(new Web3.providers.HttpProvider(provider));\n  }\n  startApp();\n});\n\n/**\n * This method is called for connecting to the node\n * The provider url is provideed in a document element with the\n * id = provider_url\n */\n\nstartApp = () => {\n  doFilterStopWatching();\n  doContractEventWatchStop();\n\n  if (web && web3.isConnected()) {\n    setData(\"connect_status\", \"Connected\", false);\n\n    setWeb3Version();\n\n    if (autoRetrieveFlag) doGetAccounts();\n  } else {\n    setData(\"connect_status\", \"Not Connected\", true);\n  }\n\n  if (!autoRetrieveFlag) return;\n  //  doConnect();\n  //  doGetAccounts();\n  doGetNodeStatus();\n  doGetCompliers();\n};\n\ndoConnect = () => {\n  let provider = document.getElementById(\"provider_url\").value;\n  window.web3 = new Web3(new Web3.providers.HttpProvider(provider));\n  startApp();\n};\n\nsetWeb3Version = () => {\n  web3.version.getNode((error, result) => {\n    if (error) setData(\"version_information\", error, true);\n    else {\n      setData(\"version_information\", result, false);\n\n      if (result.toLowerCase().includes(\"metamask\")) {\n        nodeType = \"metamask\";\n      } else if (result.tooLowerCase().includes(\"rinkebyrpc\")) {\n        nodeType = \"rinkebyrpc\";\n      } else {\n        nodeType = \"geth\";\n      }\n      setUIBasedOnNodeType();\n    }\n  });\n};\n"],"file":"main.js"}